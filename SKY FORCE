#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

using namespace std;
int n;
int xS, yS;
int Map[13][6];
int kq = -1; 
void resetData() {
	kq = -1;
	for (int i = 0; i < 13; ++i) {
		for (int j = 0; j < 6; ++j) {
			Map[i][j] = 0;
		}
	}
}
void bt(int x, int y, int c ,int igB, bool bomb)
{
	if (y < 1 || y > 5)
	{
		return; 
	}
	if (x == 0)
	{
		if (kq < c)
		{
			kq = c; 
		}
		return; 
	}
	if (Map[x][y] == 1)
	{
		c++; 
	}
	else if (Map[x][y] == 2 && igB <= 0)
	{
		if (c > 0)
		{
			c--;
		}
		else return; 
	}
	igB--; 
	bt(x - 1, y, c, igB, bomb); 
	if (bomb)
	{
		bt(x - 1, y, c, 5, false);
	}
	bt(x - 1, y+1, c, igB, bomb);
	if (bomb)
	{
		bt(x - 1, y + 1, c, 5, false);
	}
	bt(x - 1, y-1, c, igB, bomb);
	if (bomb)
	{
		bt(x - 1, y - 1, c, 5, false);
	}
	
}
int main()
{
	freopen("input.txt", "r", stdin);
	int T;
	cin >> T;
	for (int tc = 1; tc <= T; tc++)
	{
		cin >> n;
		resetData(); 
		for (int i = 1; i <= n; i++)
		{
			for (int j = 1; j <= 5; j++)
			{
				cin >> Map[i][j];
			}
		}
		xS = n + 1;
		yS = 3;
		bt(xS, yS, 0 , 0 , true);
		if (kq>=0)
		{
			cout << "Case #" << tc << endl << kq << endl;
		}
		else cout << "Case #" << tc << endl << -1 << endl;
	}
	return 0;
}

#define _CRT_SECURE_NO_WARNINGS

#include <iostream>

using namespace std;

#define SIZE 12

int map[SIZE][SIZE];
int N;
int best;

void resetData() {
	best = -1;
	for (int i = 0; i < SIZE; ++i) {
		for (int j = 0; j < 5; ++j) {
			map[i][j] = 0;
		}
	}
}

void move(int row, int col, int coin, int ignoreEnemy, bool have_bomb) {
	if (col < 0 || col > 4) return;

	if (row < 0) {
		if (best < coin) best = coin;
		return;
	}

	//process current cell
	if (map[row][col] == 1) {
		++coin;
	}
	else if (map[row][col] == 2 && ignoreEnemy <= 0) {
		if (coin > 0) --coin;
		else return;
	}

	//scroll down bombed area
	--ignoreEnemy;

	//move up
	move(row - 1, col, coin, ignoreEnemy, have_bomb);

	//use bomb and move up
	if (have_bomb) move(row - 1, col, coin, 5, false);

	//move top-left
	move(row - 1, col - 1, coin, ignoreEnemy, have_bomb);

	//use bomb and move top-left
	if (have_bomb) move(row - 1, col - 1, coin, 5, false);

	//move top-right
	move(row - 1, col + 1, coin, ignoreEnemy, have_bomb);

	//use bomb and move top-right
	if (have_bomb) move(row - 1, col + 1, coin, 5, false);
}

int main() {
	freopen("input.txt", "r", stdin);
	int T, testcase; cin >> T;
	for (testcase = 1; testcase <= T; ++testcase) {
		cin >> N;
		resetData();
		for (int i = 0; i < N; ++i) {
			for (int j = 0; j < 5; ++j) {
				cin >> map[i][j];
			}
		}
		move(N, 2, 0, 0, true);
		cout << "Case #" << testcase << " " << best << endl;
	}
	return 0;
}

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>

using namespace std ; 
int n ; 
int xS , yS ; 
int Map[13][5] ; 
int vs[13][5] ; 
int vsB[5][5] ; 
int dx[3] = {-1,-1,-1} ; 
int dy[3] = {0,-1,1} ; 
int bomb = 1 ; 
int kq = -1 ; 
bool check = false ; 
bool isSafe(int x , int y)
{
	if(x >= 0 && y >= 1 && x <= n && y <= 5)
	{
		return true; 
	}
	return false ;
}
void dungBomb(int x)
{
	for(int i = x - 5 ; i <= x - 1 ; i++)
	{
		for(int j = 1 ; j <= 5 ; j++)
		{
			if(isSafe(i,j) && Map[i][j] == 2)
			{
				vsB[i][j] = 1 ; 
				Map[i][j] = 0 ; 
			}
		}
	}
}
void BTdungBomb(int x)
{
	for(int i = x - 5 ; i <= x - 1 ; i++)
	{
		for(int j = 1 ; j <= 5 ; j++)
		{
			if(isSafe(i,j) && vsB[i][j] == 1)
			{
				vsB[i][j] = 0 ; 
				Map[i][j] = 2 ; 
			}
		}
	}
}
void xuat()
{
	for(int i = 1 ; i <= n ; i++)
	{
		for(int j = 1 ; j <= 5 ; j++)
		{
			cout << vs[i][j] << " " ; 
		}
		cout << endl ; 
	}
	cout << endl ; 
}
void bt(int x , int y , int c)
{
	if(x == 0)
	{
		if(kq <= c)
		{
			check = true ;
			kq = c ; 
		}
		return ; 
	}

	for(int i = 0 ; i < 3 ; i++)
	{
		int xx = x + dx[i] ; 
		int yy = y + dy[i] ; 

		if(isSafe(xx,yy) && Map[xx][yy] == 0 && vs[xx][yy] == 0)
		{
			vs[xx][yy] = 1 ; 
			//xuat(); 
			bt(xx,yy,c) ; 
			vs[xx][yy] = 0 ; 
		}
		if(isSafe(xx,yy) && Map[xx][yy] == 1 && vs[xx][yy] == 0)
		{
			vs[xx][yy] = 1 ; 
			//xuat(); 
			bt(xx,yy,c+1) ; 
			vs[xx][yy] = 0 ; 
		}
		if(isSafe(xx,yy) && Map[xx][yy] == 2 && vs[xx][yy] == 0 && bomb == 1)
		{
			vs[xx][yy] = 1 ; 
			//xuat(); 
			bomb-- ; 
			dungBomb(x) ; 
			bt(xx,yy,c) ;
			BTdungBomb(x) ; 
			bomb++ ; 
			vs[xx][yy] = 0 ; 
		}
		if(isSafe(xx,yy) && Map[xx][yy] == 2 && vs[xx][yy] == 0 && bomb == 0)
		{
			vs[xx][yy] = 1 ; 
			//xuat(); 
			bt(xx,yy,c-1) ; 
			vs[xx][yy] = 0 ; 
		}

	}
}
int main()
{
	freopen("input.txt" , "r" , stdin) ; 
	int T ; 
	cin >> T ;
	for(int tc = 1 ; tc <= T ; tc ++)
	{
		cin >> n ; 
		check = false ; 
		bomb = 1 ;
		kq = 0 ; 
		for(int i = 1 ; i <= n ; i++)
		{
			for(int j = 1 ; j <= 5 ; j++)
			{
				cin >> Map[i][j] ; 
			}
		}
		xS = n + 1 ; 
		yS = 3 ; 
		bt(xS,yS,0) ; 
		if(check)
		{
		cout <<"Case #" <<tc << endl << kq << endl ; 
		}
		else cout <<"Case #" <<tc << endl << -1 << endl ; 
	}
	return 0 ; 
}

50
7
2 1 2 2 0
0 2 2 0 0
2 0 2 1 0
0 0 2 1 2
0 2 1 0 2
1 2 1 0 2
1 1 2 0 2
5
0 0 1 0 0
1 2 1 0 2
2 2 0 0 1
2 1 2 1 0
2 1 2 0 2
9
2 2 2 2 2
0 0 0 0 0
0 0 0 0 0
1 0 0 0 0
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
2 2 2 2 0
6
2 2 2 2 2
0 0 0 0 0
0 0 2 0 0
2 0 0 0 2
0 0 0 0 0
1 2 2 2 1
10
1 0 1 0 1
2 2 2 2 1
0 2 2 0 2
2 0 2 1 1
2 0 2 2 0
0 2 2 1 1
2 0 2 1 2
2 1 1 2 2
1 1 2 2 2
2 1 0 1 0
9
2 0 1 1 1
0 1 0 1 2
0 1 0 2 2
0 0 0 2 1
2 0 1 0 1
0 0 2 0 2
1 0 0 2 2
2 0 0 1 1
2 0 0 0 0
7
1 2 0 1 0
0 1 2 1 2
2 0 0 0 0
2 2 1 1 2
0 0 2 0 2
0 1 0 1 1
2 1 2 0 2
8
1 2 1 1 2
1 1 2 0 0
2 1 1 2 1
1 2 1 2 0
0 0 2 2 1
1 0 2 0 0
1 2 1 2 0
0 0 2 0 1
12
2 2 2 1 0
1 2 0 0 2
1 0 1 0 1
2 1 2 1 1
1 2 2 1 2
2 2 1 0 1
2 0 1 1 0
0 2 1 0 2
1 2 2 1 2
2 2 1 2 0
1 0 2 0 1
0 0 0 1 0
12
0 0 2 2 0
2 0 0 1 2
0 1 1 2 2
0 0 1 0 2
0 2 2 0 2
1 0 2 2 0
2 2 2 2 1
1 0 1 2 2
2 1 0 1 1
1 0 1 1 0
2 2 1 1 2
0 0 1 0 2
5
1 1 0 0 0
1 2 2 2 1
1 1 2 2 1
2 2 2 1 2
2 2 0 2 0
12
2 1 2 2 2
0 2 2 1 0
0 0 1 0 1
0 1 0 2 0
2 0 0 0 0
0 1 1 0 1
0 1 0 2 2
1 1 0 2 2
2 2 1 2 2
2 0 1 0 2
1 2 1 2 0
2 0 1 1 1
11
1 1 0 0 2
0 1 1 2 2
1 0 0 1 2
2 0 1 1 2
0 0 0 2 0
2 1 2 2 0
2 1 0 2 0
1 1 2 2 1
1 2 0 0 0
2 1 0 0 2
0 0 0 2 1
8
0 0 2 2 2
2 1 1 2 2
2 0 1 1 1
1 1 2 0 0
0 0 2 0 1
0 2 0 0 1
1 1 1 2 0
0 2 0 1 2
9
1 0 0 0 0
2 2 1 1 2
0 1 1 0 0
1 2 0 2 0
1 1 1 0 0
2 1 1 0 1
0 0 1 1 1
2 1 0 0 0
0 1 2 2 1
10
2 2 2 2 2
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
2 2 2 2 0
12
1 0 1 0 1
1 1 1 0 1
0 2 0 2 0
2 0 1 0 0
0 1 2 1 0
1 2 0 1 0
0 1 1 0 2
0 1 1 1 1
0 2 0 1 0
0 0 0 1 2
1 0 0 2 2
0 0 2 0 2
12
0 2 2 0 2
0 2 0 0 0
2 0 1 2 0
0 1 1 2 1
1 2 2 2 0
1 2 1 1 2
2 0 2 1 2
2 1 1 1 0
1 0 0 1 1
2 1 0 1 2
2 1 0 1 1
1 0 2 2 0
9
0 1 1 1 1
1 0 2 0 2
2 2 2 2 1
1 0 0 0 2
1 0 2 2 1
2 1 0 1 2
1 1 0 2 1
2 2 0 0 1
1 1 0 2 0
9
1 1 0 2 0
2 2 0 2 0
1 1 0 1 0
2 0 1 1 0
1 0 1 1 2
0 0 2 1 0
2 0 2 2 1
2 0 1 1 2
2 0 2 0 0
8
2 1 1 1 0
2 1 2 2 1
0 1 0 0 2
0 1 1 0 1
2 0 0 0 2
2 0 1 1 1
0 0 1 1 0
1 1 0 0 0
10
2 0 2 2 2
0 1 0 2 1
0 0 2 1 1
1 0 1 0 1
2 0 0 0 2
0 2 2 0 2
1 1 0 2 2
0 0 1 0 1
1 1 2 0 2
0 1 0 2 0
8
1 2 1 1 1
2 1 2 1 1
1 2 0 2 2
2 0 1 0 0
1 1 2 2 0
1 0 1 2 1
1 2 0 1 2
1 2 0 0 1
10
2 1 0 0 2
2 0 0 0 1
2 1 2 2 0
0 1 0 0 1
0 2 2 2 1
2 1 0 0 0
2 0 2 1 2
2 1 2 1 2
2 0 2 0 2
1 0 2 2 1
8
2 0 2 0 2
1 0 1 2 0
0 0 0 2 1
2 0 2 0 1
1 2 1 2 0
0 2 2 0 2
2 1 1 2 2
0 2 1 2 0
8
1 1 1 2 2
1 1 1 1 2
2 1 2 2 0
2 0 0 2 2
1 0 0 0 2
1 0 2 0 2
2 0 2 0 2
0 2 0 0 1
9
1 2 2 0 2
2 0 2 1 2
1 0 1 2 1
1 0 2 1 1
2 0 1 2 1
1 2 2 0 2
0 2 0 1 0
1 0 2 2 2
2 0 2 0 1
12
1 0 1 2 1
0 2 2 1 0
0 0 2 1 0
1 1 1 1 1
2 0 2 0 0
1 2 1 2 1
0 0 0 1 2
1 1 1 1 0
2 0 2 2 1
0 0 0 2 0
1 0 2 2 2
0 1 1 1 0
8
1 0 0 2 2
2 0 1 1 0
0 0 1 2 2
1 0 1 0 0
1 1 1 0 2
1 0 1 2 0
2 2 0 2 1
0 1 2 1 0
8
2 0 0 0 0
0 0 0 1 0
2 1 0 1 2
1 2 0 0 2
1 2 1 0 1
0 2 1 1 2
1 2 0 2 2
1 1 2 2 0
7
1 0 2 0 1
0 0 1 2 1
2 1 1 2 2
1 0 2 0 1
2 2 1 2 2
0 0 1 0 2
0 0 2 2 0
9
2 2 2 0 1
2 2 0 2 1
1 0 0 2 1
2 2 2 0 1
2 2 0 0 2
1 0 2 1 1
1 2 1 1 2
0 0 2 2 0
2 0 0 0 2
8
1 1 1 0 1
0 1 1 1 2
2 1 1 0 1
2 2 0 0 2
1 1 0 0 2
2 2 0 2 1
2 0 1 1 2
2 0 1 0 0
8
0 2 2 1 1
1 2 1 0 1
0 0 2 2 0
1 0 1 1 1
0 2 0 0 1
0 2 0 1 2
1 0 0 1 1
1 0 2 0 0
12
2 2 2 2 2
2 2 2 1 2
2 1 1 0 0
2 2 2 1 2
2 2 1 0 2
0 0 0 1 1
1 0 0 1 1
0 0 1 1 0
0 1 0 2 1
1 1 1 0 2
0 0 2 1 0
2 0 2 2 2
10
1 0 2 1 2
1 2 1 0 1
1 0 0 1 1
1 1 1 1 1
1 2 1 0 0
1 1 1 2 2
0 1 2 1 1
0 0 0 1 2
1 2 0 1 2
2 1 0 1 0
11
1 0 0 0 2
2 2 0 1 2
1 2 1 0 2
1 1 0 1 0
0 2 1 0 1
2 0 0 1 2
1 0 1 0 2
0 1 1 2 0
1 0 0 0 0
0 2 0 2 1
2 2 0 2 1
9
1 0 1 2 2
2 2 1 1 1
0 0 0 1 0
0 0 0 2 0
2 1 0 1 0
2 0 2 2 1
2 2 1 1 2
1 0 0 1 1
1 1 1 1 2
9
0 0 1 2 2
0 2 0 1 0
2 0 2 2 1
2 2 2 1 1
2 2 2 1 0
0 1 0 2 1
2 1 1 1 1
0 1 0 2 1
2 1 2 2 1
7
0 1 0 1 2
2 0 1 2 1
0 2 2 1 1
1 1 0 0 0
1 0 1 1 1
1 0 2 1 1
2 0 2 0 2
12
0 1 1 0 1
0 2 0 2 2
1 0 0 1 2
2 1 1 1 0
0 2 0 0 1
0 2 1 2 2
2 2 1 1 1
0 1 2 1 0
0 0 1 1 0
2 2 0 1 2
1 1 1 1 2
0 0 1 1 1
10
1 1 2 2 1
2 1 2 2 0
2 2 1 0 0
0 1 2 2 0
1 0 2 0 1
1 2 2 0 2
0 0 0 1 2
1 2 2 1 0
1 0 1 2 2
1 2 1 1 0
11
1 2 0 0 1
2 1 1 0 2
1 2 0 2 2
1 2 0 1 1
2 0 2 2 0
1 2 1 2 1
1 0 0 0 1
0 0 1 1 2
1 0 1 0 2
1 1 2 0 2
2 0 0 2 2
9
0 1 2 2 2
2 2 2 1 1
2 2 1 1 1
1 2 2 2 1
2 1 2 2 2
0 1 2 2 0
0 0 0 0 0
2 1 1 0 1
1 2 2 1 1
11
1 2 1 0 1
0 2 1 1 2
1 0 0 1 1
2 2 0 0 1
1 0 0 2 2
1 2 1 2 0
1 1 0 0 2
2 0 1 2 2
1 2 2 1 1
1 1 1 2 1
2 1 0 0 0
8
1 2 1 2 1
1 1 0 0 2
2 2 2 2 1
1 1 0 0 2
1 2 1 1 2
0 1 1 1 2
0 0 0 1 0
1 2 2 1 0
8
1 0 1 1 1
1 0 2 0 0
2 2 0 1 2
1 0 0 0 2
0 2 0 1 2
2 1 2 0 1
2 2 2 2 0
1 2 2 1 2
8
1 0 2 1 0
0 2 1 0 2
2 0 0 0 1
0 0 2 2 0
1 2 1 0 2
0 1 1 1 1
1 2 1 2 1
2 0 0 1 2
9
1 2 1 0 2
2 2 2 1 1
2 1 1 2 1
1 2 1 0 2
1 2 1 1 0
1 1 1 2 2
0 1 0 2 0
0 0 0 0 0
1 2 0 0 1
8
2 2 0 0 1
2 1 2 2 1
0 0 0 1 1
0 2 1 1 0
0 2 2 1 1
1 0 0 0 2
2 1 2 2 1
1 1 2 0 0

OUTPUT: 
Case #1
6
Case #2
4
Case #3
0
Case #4
-1
Case #5
8
Case #6
5
Case #7
5
Case #8
6
Case #9
10
Case #10
9
Case #11
3
Case #12
10
Case #13
9
Case #14
5
Case #15
8
Case #16
-1
Case #17
9
Case #18
8
Case #19
7
Case #20
7
Case #21
7
Case #22
7
Case #23
6
Case #24
5
Case #25
4
Case #26
5
Case #27
5
Case #28
9
Case #29
6
Case #30
5
Case #31
4
Case #32
6
Case #33
6
Case #34
6
Case #35
9
Case #36
10
Case #37
8
Case #38
8
Case #39
8
Case #40
5
Case #41
10
Case #42
8
Case #43
8
Case #44
6
Case #45
10
Case #46
7
Case #47
5
Case #48
6
Case #49
7
Case #50
7

SINPUT:
3
5
1 1 0 0 0
1 2 2 2 1
1 1 2 2 1
2 2 2 1 2
2 2 0 2 0
8
2 0 2 0 2
1 0 1 2 0
0 0 0 2 1
2 0 2 0 1
1 2 1 2 0
0 2 2 0 2
2 1 1 2 2
0 2 1 2 0
12
2 1 2 2 2
0 2 2 1 0
0 0 1 0 1
0 1 0 2 0
2 0 0 0 0
0 1 1 0 1
0 1 0 2 2
1 1 0 2 2
2 2 1 2 2
2 0 1 0 2
1 2 1 2 0
2 0 1 1 1
